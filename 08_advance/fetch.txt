Using the Fetch API
The Fetch API provides a JavaScript interface for accessing and manipulating parts of the protocol, such as requests and responses. It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.
Unlike XMLHttpRequest that is a callback-based API, Fetch is promise-based and provides a better alternative that can be easily used in service workers. Fetch also integrates advanced HTTP concepts such as CORS and other extensions to HTTP.

The simplest use of fetch() takes one argument — the path to the resource you want to fetch — 
and does not directly return the JSON response body but instead returns a promise that resolves with a Response object.

The Response object, in turn, does not directly contain the actual JSON response body but is instead a representation of the entire HTTP response. 
So, to extract the JSON body content from the Response object, we use the json() method, which returns a second promise that resolves with the result of parsing the response body text as JSON.

whenever we fetch any api using 'Fetch', it will take some time for that 
that's why we must have to use the await keyword for waiting otherwise it goes into pending

A fetch() promise only rejects when a network error is encountered (which is usually when there's permissions issue of similar). A fetch() promise does not reject on HTTP erros. (404,etc).

await always comes with async 
await is used for providing some time to do the job, otherwise it goes into pending state
fetch is used for taking link from the urls or we say that taking the data online 
json is used to convert the achieve data into readable form for reading those data